/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/attach_detach.go

// Package mockattachmentprovisioner is a generated GoMock package.
package mockattachmentprovisioner

import (
	context "context"
	"github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2022-03-01/compute"
	gomock "github.com/golang/mock/gomock"
	"k8s.io/apimachinery/pkg/types"
	reflect "reflect"
	azureconstants "sigs.k8s.io/azuredisk-csi-driver/pkg/azureconstants"
	provisioner "sigs.k8s.io/azuredisk-csi-driver/pkg/provisioner"
)

// MockCloudDiskAttachDetacher is a mock of CloudDiskAttachDetacher interface
type MockCloudDiskAttachDetacher struct {
	ctrl     *gomock.Controller
	recorder *MockCloudDiskAttachDetacherMockRecorder
}

// MockCloudDiskAttachDetacherMockRecorder is the mock recorder for MockCloudDiskAttachDetacher
type MockCloudDiskAttachDetacherMockRecorder struct {
	mock *MockCloudDiskAttachDetacher
}

// NewMockCloudDiskAttachDetacher creates a new mock instance
func NewMockCloudDiskAttachDetacher(ctrl *gomock.Controller) *MockCloudDiskAttachDetacher {
	mock := &MockCloudDiskAttachDetacher{ctrl: ctrl}
	mock.recorder = &MockCloudDiskAttachDetacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudDiskAttachDetacher) EXPECT() *MockCloudDiskAttachDetacherMockRecorder {
	return m.recorder
}

// PublishVolume mocks base method
func (m *MockCloudDiskAttachDetacher) PublishVolume(ctx context.Context, volumeID, nodeID string, volumeContext map[string]string) provisioner.CloudAttachResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVolume", ctx, volumeID, nodeID, volumeContext)
	ret0, _ := ret[0].(provisioner.CloudAttachResult)
	return ret0
}

// PublishVolume indicates an expected call of PublishVolume
func (mr *MockCloudDiskAttachDetacherMockRecorder) PublishVolume(ctx, volumeID, nodeID, volumeContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVolume", reflect.TypeOf((*MockCloudDiskAttachDetacher)(nil).PublishVolume), ctx, volumeID, nodeID, volumeContext)
}

// UnpublishVolume mocks base method
func (m *MockCloudDiskAttachDetacher) UnpublishVolume(ctx context.Context, volumeID, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishVolume", ctx, volumeID, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpublishVolume indicates an expected call of UnpublishVolume
func (mr *MockCloudDiskAttachDetacherMockRecorder) UnpublishVolume(ctx, volumeID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishVolume", reflect.TypeOf((*MockCloudDiskAttachDetacher)(nil).UnpublishVolume), ctx, volumeID, nodeID)
}

// GetNodeDataDisks mocks base method
func (m *MockCloudDiskAttachDetacher) GetNodeDataDisks(nodeName types.NodeName) ([]compute.DataDisk, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeDataDisks", nodeName)
	ret0, _ := ret[0].([]compute.DataDisk)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodeDataDisks indicates an expected call of GetNodeDataDisks
func (mr *MockCloudDiskAttachDetacherMockRecorder) GetNodeDataDisks(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeDataDisks", reflect.TypeOf((*MockCloudDiskAttachDetacher)(nil).GetNodeDataDisks), nodeName)
}

// GetDiskLun mocks base method
func (m *MockCloudDiskAttachDetacher) GetDiskLun(diskName, diskURI string, nodeName types.NodeName) (int32, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskLun", diskName, diskURI, nodeName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDiskLun indicates an expected call of GetDiskLun
func (mr *MockCloudDiskAttachDetacherMockRecorder) GetDiskLun(diskName, diskURI, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskLun", reflect.TypeOf((*MockCloudDiskAttachDetacher)(nil).GetDiskLun), diskName, diskURI, nodeName)
}

// CheckDiskExists mocks base method
func (m *MockCloudDiskAttachDetacher) CheckDiskExists(ctx context.Context, diskURI string) (*compute.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDiskExists", ctx, diskURI)
	ret0, _ := ret[0].(*compute.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDiskExists indicates an expected call of CheckDiskExists
func (mr *MockCloudDiskAttachDetacherMockRecorder) CheckDiskExists(ctx, diskURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDiskExists", reflect.TypeOf((*MockCloudDiskAttachDetacher)(nil).CheckDiskExists), ctx, diskURI)
}

// GetNodeNameByProviderID mocks base method
func (m *MockCloudDiskAttachDetacher) GetNodeNameByProviderID(providerID string) (types.NodeName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeNameByProviderID", providerID)
	ret0, _ := ret[0].(types.NodeName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDiskExists indicates an expected call of GetNodeNameByProviderID
func (mr *MockCloudDiskAttachDetacherMockRecorder) GetNodeNameByProviderID(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeNameByProviderID", reflect.TypeOf((*MockCloudDiskAttachDetacher)(nil).GetNodeNameByProviderID), providerID)
}

// MockCrdDetacher is a mock of CrdDetacher interface
type MockCrdDetacher struct {
	ctrl     *gomock.Controller
	recorder *MockCrdDetacherMockRecorder
}

// MockCrdDetacherMockRecorder is the mock recorder for MockCrdDetacher
type MockCrdDetacherMockRecorder struct {
	mock *MockCrdDetacher
}

// NewMockCrdDetacher creates a new mock instance
func NewMockCrdDetacher(ctrl *gomock.Controller) *MockCrdDetacher {
	mock := &MockCrdDetacher{ctrl: ctrl}
	mock.recorder = &MockCrdDetacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrdDetacher) EXPECT() *MockCrdDetacherMockRecorder {
	return m.recorder
}

// UnpublishVolume mocks base method
func (m *MockCrdDetacher) UnpublishVolume(ctx context.Context, volumeID, nodeID string, secrets map[string]string, mode azureconstants.UnpublishMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishVolume", ctx, volumeID, nodeID, secrets, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpublishVolume indicates an expected call of UnpublishVolume
func (mr *MockCrdDetacherMockRecorder) UnpublishVolume(ctx, volumeID, nodeID, secrets, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishVolume", reflect.TypeOf((*MockCrdDetacher)(nil).UnpublishVolume), ctx, volumeID, nodeID, secrets, mode)
}

// WaitForDetach mocks base method
func (m *MockCrdDetacher) WaitForDetach(ctx context.Context, volumeID, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDetach", ctx, volumeID, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDetach indicates an expected call of WaitForDetach
func (mr *MockCrdDetacherMockRecorder) WaitForDetach(ctx, volumeID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDetach", reflect.TypeOf((*MockCrdDetacher)(nil).WaitForDetach), ctx, volumeID, nodeID)
}
